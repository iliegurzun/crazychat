<?php

namespace Duedinoi\UserBundle\Repository;

use Doctrine\ORM\EntityRepository;
use FOS\UserBundle\Model\UserInterface;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository
{
    public function getLastRegistered($limit = 12)
    {
        $qb = $this->createQueryBuilder('u')
            ->andWhere('u.roles NOT LIKE :admin')
            ->setParameter('admin', '%ROLE_ADMIN%')
            ->andWhere('u.roles NOT LIKE :robot')
            ->setParameter('robot', '%ROLE_ROBOT%')
            ->orderBy('u.id', 'desc');
        if ($limit) {
            $qb->setMaxResults($limit);
        }

        return $qb->getQuery()->execute();
    }
    
    public function findActiveExcept($user = null, $limit = null)
    {
        $delay = new \DateTime('2 minutes ago');
        $qb = $this
                ->createQueryBuilder('u')
                ->select('u as user')
                ->leftJoin('u.photos', 'ph')
                ->addSelect('COUNT(ph.id) as photos')
                ->andWhere('u.lastActivityAt > :delay')
                ->setParameter('delay', $delay)
                ->andWhere('u.roles NOT LIKE :admin')
                ->setParameter('admin', '%ROLE_ADMIN%')
                
                ->having('photos > 0')
                ;
        if ($user instanceof UserInterface) {
            $qb
                ->andWhere('u.id != :user_id')
                ->setParameter('user_id', $user->getId());
        }
        if (!empty($limit)) {
            $qb->setMaxResults($limit);
        }
        
        return $qb->getQuery()->execute();
    }

    public function findByFiltersSearch(array $filters = array(), $currentUser)
    {
        $qb = $this->createQueryBuilder('u');
        if (isset($filters['role'])) {
            $qb
                ->where('u.roles LIKE :admin')
                ->setParameter('admin', '%'.$filters['role'].'%');
        }
        if (isset($filters['email'])) {
            $qb
                ->andWhere('u.email LIKE :email')
                ->setParameter('email', '%'.$filters['email'].'%');
        }
        $results = $qb->getQuery()->execute();
        foreach ($results as $key => $result) {
            if ($result->hasRole('ROLE_ROBOT')) {
                if ($result->getRecruiter() != $currentUser) {
                    unset($results[$key]);
                }
            }
        }

        return $results;
    }
    
    public function findByFilters(array $filters = array())
    {
        $qb = $this->createQueryBuilder('u')
                ->select('u as user')
                ->join('u.profile', 'p')
                ->leftJoin('u.photos', 'ph')
                ->addSelect('COUNT(ph.id) as photos')
                ->andWhere('u.roles NOT LIKE :admin')
                ->setParameter('admin', '%ROLE_ADMIN%')
                ->andWhere('u.enabled = true')
                ;
        if (isset($filters['withPhoto'])) {
            $qb
                ->having('photos > 0');
        }
        if (isset($filters['online'])) {
            $delay = new \DateTime('2 minutes ago');
            $qb
                ->andWhere('u.lastActivityAt > :delay')
                ->setParameter('delay', $delay);
        }
        if (isset($filters['username'])) {
            $username = $filters['username'];
            $qb->andWhere('u.username LIKE :username')
                    ->setParameter('username', "%$username%");
        }
        if (isset($filters['user'])) {
            $qb
                ->andWhere('u.id != :user_id')
                ->setParameter('user_id', $filters['user']->getId());
        }
        if (isset($filters['gender'])) {
            $qb
                ->andWhere('p.gender != :gender')
                ->setParameter('gender', $filters['gender']);
        }
        $qb->groupBy('u.id');
        $results = $qb->getQuery()->getResult();
        
        return $results;
    }
    
    public function findAdmins()
    {
        $qb = $this->createQueryBuilder('u')
            ->orWhere('u.roles LIKE :admin')
            ->setParameter('admin', '%ROLE_ADMIN%')
            ->orWhere('u.roles LIKE :super_admin')
            ->setParameter('super_admin', '%ROLE_SUPER_ADMIN%');
        
        return $qb->getQuery()->execute();
    }
    
    public function findRecruited()
    {
        $qb = $this->createQueryBuilder('u')
            ->where('u.recruiter IS NOT NULL');
        
        return $qb->getQuery()->execute();
    }
    
    public function findNormal()
    {
        $qb = $this->createQueryBuilder('u')
            ->where('u.recruiter IS NULL');
        
        return $qb->getQuery()->execute();
    }
}
